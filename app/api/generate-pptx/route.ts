export async function POST(request: Request) {
  try {
    console.log("[v0] Starting PowerPoint generation...")

    const data = await request.json()
    console.log("[v0] Received data:", JSON.stringify(data, null, 2))

    // Dynamic import to avoid webpack bundling issues
    const officegen = await import("officegen").then((m) => m.default || m)
    console.log("[v0] Officegen imported successfully")

    return new Promise((resolve, reject) => {
      const pptx = officegen("pptx")
      console.log("[v0] Created PPTX instance")

      // Set presentation properties
      pptx.setDocTitle(data.title || "GMDC Presentation")
      pptx.setDocSubject("Generated by GMDC Presentation System")
      pptx.setDocAuthor("GMDC Ltd")

      // Add slides based on data
      data.slides?.forEach((slideData: any, index: number) => {
        console.log(`[v0] Adding slide ${index + 1}: ${slideData.type}`)

        const slide = pptx.makeNewSlide()

        if (slideData.type === "title") {
          // Title slide
          slide.addText(slideData.title || data.title, {
            x: 1,
            y: 2,
            w: 8,
            h: 2,
            font_size: 36,
            bold: true,
            color: "1f4e79",
          })

          if (slideData.subtitle) {
            slide.addText(slideData.subtitle, {
              x: 1,
              y: 4,
              w: 8,
              h: 1,
              font_size: 24,
              color: "666666",
            })
          }
        } else if (slideData.type === "content") {
          // Content slide
          slide.addText(slideData.title, {
            x: 1,
            y: 0.5,
            w: 8,
            h: 1,
            font_size: 28,
            bold: true,
            color: "1f4e79",
          })

          if (slideData.content) {
            slide.addText(slideData.content, {
              x: 1,
              y: 2,
              w: 8,
              h: 4,
              font_size: 16,
              color: "333333",
            })
          }
        }

        // Add slide number (except for title slide)
        if (index > 0) {
          slide.addText(`${index + 1}`, {
            x: 9,
            y: 6.5,
            w: 0.5,
            h: 0.5,
            font_size: 12,
            color: "666666",
          })
        }
      })

      console.log("[v0] All slides added, generating buffer...")

      const chunks: Buffer[] = []

      pptx.on("data", (chunk: Buffer) => {
        chunks.push(chunk)
      })

      pptx.on("end", () => {
        console.log("[v0] PowerPoint generation completed")
        const buffer = Buffer.concat(chunks)

        resolve(
          new Response(buffer, {
            status: 200,
            headers: {
              "Content-Type": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
              "Content-Disposition": `attachment; filename="${data.title || "presentation"}.pptx"`,
              "Content-Length": buffer.length.toString(),
            },
          }),
        )
      })

      pptx.on("error", (err: Error) => {
        console.error("[v0] PowerPoint generation error:", err)
        reject(
          new Response(JSON.stringify({ error: err.message }), {
            status: 500,
            headers: { "Content-Type": "application/json" },
          }),
        )
      })

      // Generate the presentation
      pptx.generate()
    })
  } catch (error) {
    console.error("[v0] API Error:", error)
    return new Response(
      JSON.stringify({
        error: "PowerPoint generation failed",
        details: error instanceof Error ? error.message : "Unknown error",
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json" },
      },
    )
  }
}
